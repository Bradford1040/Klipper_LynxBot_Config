[gcode_macro START_PRINT]
description: Pre-Heat the bed and the nozzle, reset Feedrate and Flowrate, home all axes and clean the nozzle
gcode:
  {% set VOLUME = params.VOLUME|default(1000)|int %}
  {% set LIGHT = params.LIGHT|default('OFF')|string %}
  {% set ENABLE_BOT_LIGHT = params.ENABLE_BOT_LIGHT|default('ON')|string %}
  
  {% set PURGE_LINE = params.PURGE_LINE|default('TRUE')|string %}
  {% set DOUBLE_LINE = params.DOUBLE_LINE|default('FALSE')|string %}
  {% set FORCE_HOME = params.FORCE_HOME|default('TRUE')|string %}
  {% set BED_MESH = params.BED_MESH|default('FALSE')|string %}
  {% set FORCE_MESH = params.FORCE_MESH|default('TRUE')|string %}
  {% set ADAPTIVE_MESH = params.ADAPTIVE_MESH|default('FALSE')|string %}
  {% set BED_MESH_PROFILE = params.BED_MESH_PROFILE|default('default')|string %}
  {% set SOAK_TIME = params.SOAK_TIME|default(60)|int %}
  {% set BED_PRE_HEAT_OFFSET = params.BED_PRE_HEAT_OFFSET|default(15)|int %}
  {% set FIRMWARE_RETRACT = params.FIRMWARE_RETRACT|default('FALSE')|string %}
  {% set BRIM = params.BRIM|default(0)|int %}
  {% set SKIRTS = params.SKIRTS|default(0)|int %}
  {% set FL_SIZE = params.SIZE|default("0_0_0_0")|string %}

  {% if BED_MESH == 'TRUE' and ADAPTIVE_MESH == 'TRUE' %}
    {% set PURGE_LINE = 'FALSE' %}
  {% endif %}
  
  {% if BRIM > 5 %}
    {% set PURGE_LINE = 'FALSE' %}
  {% endif %}
  
  {% if SKIRTS > 3 %}
    {% set PURGE_LINE = 'FALSE' %}
  {% endif %}

  {% set BED_TEMP = params.BED_TEMP|default(65)|float %}
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(215)|float %}

  {% if 'RETRACTION_AMOUNT' in params|upper %}
    {% set RETRACTION_AMOUNT = params.RETRACTION_AMOUNT|float %}
  {% else %}
    {% set RETRACTION_AMOUNT = 0|float %}
    {% set FIRMWARE_RETRACT = 'TRUE'|string %}
  {% endif %}

  {% if 'RETRACTION_SPEED' in params|upper %}
    {% set RETRACTION_SPEED = params.RETRACTION_SPEED|float * 60 %}
  {% else %}
    {% set RETRACTION_SPEED = 0|float %}
    {% set FIRMWARE_RETRACT = 'TRUE'|string %}
  {% endif %}

  {% if ENABLE_BOT_LIGHT|upper == 'ON' %}
    SET_GCODE_VARIABLE MACRO=LIGHT VARIABLE=disable_slicer value=0
  {% else %}
    SET_GCODE_VARIABLE MACRO=LIGHT VARIABLE=disable_slicer value=1
  {% endif %}

  {% if printer['gcode_macro NOZZLE_LIGHT'].value|int != 0 or LIGHT|upper == 'ON' %}
    {% set BASE_TEMP = printer.heater_bed.temperature - 5 %}
    SET_LED_TEMPLATE LED=TOOLHEAD TEMPLATE=bed_heat INDEX=1 param_target_temp={BED_TEMP} param_base_temp={BASE_TEMP}
    SET_LED_TEMPLATE LED=TOOLHEAD TEMPLATE=bed_heat INDEX=3 param_target_temp={BED_TEMP} param_base_temp={BASE_TEMP}
  {% elif printer['gcode_macro STATUS_LIGHT'].value|int != 0 %}
    {% set BASE_TEMP = printer.heater_bed.temperature - 5 %}
    SET_LED_TEMPLATE LED=TOOLHEAD TEMPLATE=bed_heat INDEX=2 param_target_temp={BED_TEMP} param_base_temp={BASE_TEMP}
  {% endif %}
  # Heat bed to desired temp - offset
  {% if printer.heater_bed.temperature < BED_TEMP - BED_PRE_HEAT_OFFSET %}
    M140 S{BED_TEMP - BED_PRE_HEAT_OFFSET}
  {% endif %}

  M117 Starting up
  BED_MESH_CLEAR
  # Reset the G-Code Z offset (adjust Z offset if needed)
  SET_GCODE_OFFSET Z=0.01
  M220 S100 ;Reset Feedrate
  M221 S100 ;Reset Flowrate

  M117 Homing
  {% if FORCE_HOME == 'TRUE' %}
    G28 P0
  {% else %}
    G28 X0 Y0 Z0 P0
  {% endif %}
  
  {% if BED_MESH|upper == 'FALSE' %}
      RESPOND PREFIX=Using MSG="Bed Mesh Profile {BED_MESH_PROFILE}"
      BED_MESH_PROFILE LOAD={BED_MESH_PROFILE}
  {% endif %}
  
  G90
  G1 X{printer["gcode_macro _PURGE_LINE_VARIABLES"].heat_up_pos[0]} F5000
  G1 Y{printer["gcode_macro _PURGE_LINE_VARIABLES"].heat_up_pos[1]} F5000
  G1 Z0.1 F5000

  M117 Heating up
  {% if printer.heater_bed.temperature < BED_TEMP - BED_PRE_HEAT_OFFSET %}
    M190 S{BED_TEMP - BED_PRE_HEAT_OFFSET}
  {% endif %}


  # Heat bed to desired temp, but don't wait for it
  M140 S{BED_TEMP}
  # Heat extruder to desired temp but don't wait for it
  # M104 S{EXTRUDER_TEMP}

  # Set and wait for nozzle to reach temperature
  M109 S{EXTRUDER_TEMP}
  # Zero Extruder
  G92 E0

  # Wait for bed to reach temperature
  M190 S{BED_TEMP}

  {% if BED_TEMP > 0 %}
    {% for i in range(SOAK_TIME) %}
      {% set remaining = SOAK_TIME - i %}
      M117 Starting in {remaining}s
      G4 P1000
    {% endfor %}
  {% endif %}

  {% if BED_MESH|upper == 'TRUE' %}
    {% if ADAPTIVE_MESH|upper == 'TRUE' %}
      {% set PURGE_LINE = 'FALSE' %}
      M117 Leveling
      RESPOND PREFIX=Generating MSG="adaptive Bed Mesh"
      ADAPTIVE_BED_MESH SIZE={FL_SIZE} FORCE_MESH={FORCE_MESH}
    {% else %}
      M117 Leveling
      RESPOND PREFIX=Generating MSG="new Bed Mesh"
      BED_MESH_CALIBRATE PROFILE=print
    {% endif %}
    UNLOCK_DOCKING
    DOCK_PROBE RETURN_POSITION=FALSE
  {% endif %}

  {% if printer['gcode_macro NOZZLE_LIGHT'].value|int != 0 or LIGHT|upper == 'ON' %}
    SET_LED_TEMPLATE LED=TOOLHEAD TEMPLATE="" INDEX=1
    SET_LED_TEMPLATE LED=TOOLHEAD TEMPLATE="" INDEX=3
    NOZZLE_LIGHT value=1
  {% elif printer['gcode_macro STATUS_LIGHT'].value|int != 0 %}
    SET_LED_TEMPLATE LED=TOOLHEAD TEMPLATE="" INDEX=2
    STATUS_LIGHT value=1
  {% endif %}
  M117 Printing

  M83
  G1 E2 F2700
  M82

  {% if PURGE_LINE|upper == 'TRUE' %}
    # Move to start position
    G1 Z0.1
    G91
    G1 X-2 F5000
    G90

    # Move the Z Axis up
    G1 Z0.28
    # Draw the first line
    G91
    G1 Y180 F1500 E15
    G90
    {% if DOUBLE_LINE|upper == 'TRUE' %}
      # Move to side a little
      G91
      G1 X-1 F5000
      # Draw the second line
      G1 Y-180 F1500 E15
      G90
    {% endif %}

    {% if FIRMWARE_RETRACT|upper == 'TRUE' %}
      G10
    {% else %}
      M83
      G1 E{RETRACTION_AMOUNT * -1} F{RETRACTION_SPEED}
      M82
    {% endif %}
    # Move Z Axis up
    G1 Z5.0 F3000

    G91
    G1 X-2 Y-2 F5000
    G90

    # G4 P1000
    
    # {% if FIRMWARE_RETRACT|upper == 'TRUE' %}
    #   G11
    # {% else %}
    #   M83
    #   G1 E{RETRACTION_AMOUNT} F{RETRACTION_SPEED}
    #   M82
    # {% endif %}
  {% endif %}

  # Reset Extruder
  G92 E0
  M300 V{VOLUME} A3



[gcode_macro END_PRINT]
description: Put the bed in a accessibly position after printing is done
gcode:
  {% set VOLUME = params.VOLUME|default(1000)|int %}
  {% set LIGHT = params.LIGHT|default('OFF')|string %}

  {% set FIRMWARE_RETRACT = params.FIRMWARE_RETRACT|default('FALSE')|string %}

  {% if 'RETRACTION_AMOUNT' in params|upper %}
    {% set RETRACTION_AMOUNT = params.RETRACTION_AMOUNT|float %}
  {% else %}
    {% set RETRACTION_AMOUNT = 0|float %}
    {% set FIRMWARE_RETRACT = 'TRUE'|string %}
  {% endif %}

  {% if 'RETRACTION_SPEED' in params|upper %}
    {% set RETRACTION_SPEED = params.RETRACTION_SPEED|float * 60 %}
  {% else %}
    {% set RETRACTION_SPEED = 0|float %}
    {% set FIRMWARE_RETRACT = 'TRUE'|string %}
  {% endif %}

  {% if printer.toolhead.position.x < (printer["gcode_macro _BED_SIZE"].bed_size[0] / 2) %}
    {% set x = 0.5|float %}
  {% else %}
    {% set x = -0.5|float %}
  {% endif %}

  {% if printer.toolhead.position.y < (printer["gcode_macro _BED_SIZE"].bed_size[1] / 2) %}
    {% set y = 0.5|float %}
  {% else %}
    {% set y = -0.5|float %}
  {% endif %}

  M400
  {% if FIRMWARE_RETRACT|upper == 'TRUE' %}
    G10
  {% else %}
    G91
    G1 X{x} Y{y} Z5 E{RETRACTION_AMOUNT * -1} F{RETRACTION_SPEED}
    G90
  {% endif %}

  G91
  G1 X{x} Y{y} Z5 E-2 F2400
  G90

  M117 Done
  HEATERS_OFF

  {% if LIGHT|upper == 'ON' %}
    NOZZLE_LIGHT_ON RED=0 GREEN=200 BLUE=0 WHITE=0 BRIGHTNESS=255
  {% else %}
    IF_ON_SET_NOZZLE_LIGHT RED=0 GREEN=200 BLUE=0 WHITE=0 BRIGHTNESS=255
  {% endif %}

  M300 V{VOLUME} A3

  G1 X{printer.configfile.settings.stepper_x.position_endstop - 5} Y{printer.configfile.settings.stepper_y.position_endstop - 5} F5000
  G1 Z{printer.configfile.settings.stepper_z.position_max - 5} F5000

  G92 E0
  
  # HEATERS_OFF
  # MOTORS_OFF
  # SET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=1
  # SET_KINEMATIC_POSITION X={printer["gcode_macro _PARK_VARIABLES"].park_pos[0]} Y={printer["gcode_macro _PARK_VARIABLES"].park_pos[1]} Z=310
  # FANS_OFF
  ALL_OFF
  BED_MESH_CLEAR
  SET_GCODE_VARIABLE MACRO=LIGHT VARIABLE=disable_slicer value=0
  UPDATE_DELAYED_GCODE ID=CLEAR_DISPLAY DURATION=60
  UPDATE_DELAYED_GCODE ID=RESET_FILE DURATION=60


[gcode_macro PAUSE]
description: Pause the current running print
rename_existing: PAUSE_BASE
# change this if you need more or less extrusion
variable_extrude: 5
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  ##### calculate save lift position #####
  {% set max_z = printer.TOOLHEAD.axis_maximum.z|float %}
  {% set act_z = printer.TOOLHEAD.position.z|float %}
  {% if act_z < (max_z - 2.0) %}
      {% set z_safe = 2.0 %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  PAUSE_BASE
  G91
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G10
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.TOOLHEAD.homed_axes %}
    G1 Z{z_safe} F900
    G90
    G1 X{printer["gcode_macro _PARK_VARIABLES"].park_pos[0]} Y{printer["gcode_macro _PARK_VARIABLES"].park_pos[1]} F6000
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %} 

[gcode_macro RESUME]
description: Resume the current running print
rename_existing: RESUME_BASE
gcode:
  ##### read E from pause macro #####
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {%else %}
    {% set get_params = "" %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G11
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}  
  RESUME_BASE {get_params}

[gcode_macro CANCEL_PRINT]
description: Cancel the current running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  END_PRINT
  CANCEL_PRINT_BASE

# Usage: SET_PAUSE_NEXT_LAYER [ENABLE=[0|1]] [MACRO=<name>]
[gcode_macro SET_PAUSE_NEXT_LAYER]
description: Enable a pause if the next layer is reached
gcode:
  {% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
  {% set ENABLE = params.ENABLE | default(1) | int != 0 %}
  {% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}
  SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

# Usage: SET_PAUSE_AT_LAYER [ENABLE=[0|1]] [LAYER=<number>] [MACRO=<name>]
[gcode_macro SET_PAUSE_AT_LAYER]
description: Enable/disable a pause if a given layer number is reached
gcode:
  {% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
  {% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined
             else params.LAYER is defined %}
  {% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}
  {% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}
  SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

# Usage: SET_PRINT_STATS_INFO [TOTAL_LAYER=<total_layer_count>] [CURRENT_LAYER= <current_layer>]
[gcode_macro SET_PRINT_STATS_INFO]
rename_existing: SET_PRINT_STATS_INFO_BASE
description: Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer: { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer  : { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode:
  {% if pause_next_layer.enable %}
    {action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}
    {pause_next_layer.call} ; execute the given gcode to pause, should be either M600 or PAUSE
    SET_PAUSE_NEXT_LAYER ENABLE=0
  {% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
    {action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}
    {pause_at_layer.call} ; execute the given gcode to pause, should be either M600 or PAUSE
    SET_PAUSE_AT_LAYER ENABLE=0
  {% endif %}
  SET_PRINT_STATS_INFO_BASE {rawparams}
