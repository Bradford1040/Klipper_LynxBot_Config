[gcode_macro START_PRINT]
description: Pre-Heat the bed and the nozzle, reset Feedrate and Flowrate, home all axes and clean the nozzle

variable_filament_type: 'None'
variable_filament_profile: 'None'
variable_retraction_amount: 0
variable_retraction_speed: 0
variable_firmware_retract: False
variable_initial_detection_length: 0

gcode:
  {% set Z_OFFSET = 0.00 %} # 0.15
  {% set INTELLIGENT_MESH_LOAD = 1 %}
  {% set INTELLIGENT_OFFSET_LOAD = 1 %}
  {% set INTELLIGENT_BEACON_MODEL_LOAD = 1 %}
  {% set DEFAULT_SOAK_TIME = 60 %}
  {% set INITIAL_DETECTION_LENGTH = 20 %}
  {% set EXTRUDER_PRE_HEAT_TEMP = 120 %}

  {% set VOLUME = params.VOLUME|default(1000)|int %}

  {% set FORCE_LIGHT = params.FORCE_LIGHT|default('FALSE')|boolean %}
  {% set ENABLE_BOT_LIGHT = params.ENABLE_BOT_LIGHT|default('TRUE')|boolean %}

  {% set PURGE_LINE = params.PURGE_LINE|default('TRUE')|boolean %}
  {% set DOUBLE_LINE = params.DOUBLE_LINE|default('FALSE')|boolean %}

  {% set FORCE_HOME = params.FORCE_HOME|default('TRUE')|boolean %}

  {% set BED_MESH = params.BED_MESH|default('TRUE')|boolean %}
  {% set TEMP_MESH = params.TEMP_MESH|default('FALSE')|boolean %}
  {% set FORCE_MESH = params.FORCE_MESH|default('TRUE')|boolean %}
  {% set ADAPTIVE_MESH = params.ADAPTIVE_MESH|default('FALSE')|boolean %}
  {% set BED_MESH_PROFILE = params.BED_MESH_PROFILE|default('default')|string %}
  {% set BEACON_MODEL = params.BEACON_MODEL|default('default')|string %}
  {% if not TEMP_MESH %}
    {% set ADAPTIVE_MESH = FALSE|boolean %}
  {% endif %}

  {% set SOAK_TIME = params.SOAK_TIME|default(DEFAULT_SOAK_TIME)|int %}

  {% set SLICER_Z_OFFSET = params.Z_OFFSET|default(0.00)|float %}

  {% set USE_FILAMENT_PID_PROFILE = params.FILAMENT_PID_PROFILE|default('TRUE')|boolean %}
  {% set FILAMENT_PROFILE = params.FILAMENT_PROFILE|default('None')|string %}
  {% set FILAMENT_TYPE = params.FILAMENT_TYPE|default('None')|string %}
  SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=filament_type VALUE="'{ FILAMENT_TYPE }'"
  SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=filament_profile VALUE="'{ FILAMENT_PROFILE }'"
  SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=initial_detection_length VALUE="'{ INITIAL_DETECTION_LENGTH }'"

  {% set FIRMWARE_RETRACT = params.FIRMWARE_RETRACT|default('FALSE')|boolean %}

  {% set BRIM = params.BRIM|default(0)|int %}
  {% set SKIRTS = params.SKIRTS|default(0)|int %}

  {% set FL_SIZE = params.SIZE|default("0_0_0_0")|string %}

  {% if BED_MESH and TEMP_MESH and ADAPTIVE_MESH %}
    {% set PURGE_LINE = 'FALSE'|boolean %}
  {% endif %}
  
  {% if BRIM > 5 %}
    {% set PURGE_LINE = 'FALSE'|boolean %}
  {% endif %}
  
  {% if SKIRTS > 3 %}
    {% set PURGE_LINE = 'FALSE'|boolean %}
  {% endif %}

  {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(215)|float %}
  {% set BED_TEMP_FIRST_LAYER = params.BED_TEMP_FIRST_LAYER|default(BED_TEMP)|float %}
  {% set EXTRUDER_TEMP_FIRST_LAYER = params.EXTRUDER_TEMP_FIRST_LAYER|default(EXTRUDER_TEMP)|float %}

  {% if params.BED_TEMP is not defined %}
    RESPOND MSG="!!!BED_TEMP is not defined!!!" color=error
    CANCEL_PRINT
  {% elif params.EXTRUDER_TEMP is not defined %}
    RESPOND MSG="!!!EXTRUDER_TEMP is not defined!!!" color=error
    CANCEL_PRINT
  {% elif printer.save_variables.variables.default_mesh is defined and printer['gcode_macro _MAX_BED_TEMPS'].surfaces[printer.save_variables.variables.default_mesh] is defined and BED_TEMP_FIRST_LAYER > printer['gcode_macro _MAX_BED_TEMPS'].surfaces[printer.save_variables.variables.default_mesh] %}
    RESPOND MSG="!!!Requested first layer bed temp too high for current Build Plate!!!" color=error
    CANCEL_PRINT
  {% elif printer.save_variables.variables.default_mesh is defined and printer['gcode_macro _MAX_BED_TEMPS'].surfaces[printer.save_variables.variables.default_mesh] is defined and BED_TEMP > printer['gcode_macro _MAX_BED_TEMPS'].surfaces[printer.save_variables.variables.default_mesh] %}
    RESPOND MSG="!!!Requested bed temp too high for current Build Plate!!!" color=error
    CANCEL_PRINT
  {% elif not printer['filament_switch_sensor Switch'].filament_detected %}
    NOTIFY_RUNOUT_SWITCH
    CANCEL_PRINT
  {% else %}
    {% if printer['gcode_macro _PROBE_VARIABLES'].max_bed_temp != -1 and BED_TEMP_FIRST_LAYER > printer['gcode_macro _PROBE_VARIABLES'].max_bed_temp %}
      {% set BED_TEMP_LEVELING = printer['gcode_macro _PROBE_VARIABLES'].max_bed_temp %}
    {% else %}
      {% set BED_TEMP_LEVELING = BED_TEMP_FIRST_LAYER %}
    {% endif %}

    {% if printer['gcode_macro _PROBE_VARIABLES'].max_extruder_temp != -1 and EXTRUDER_TEMP_FIRST_LAYER > printer['gcode_macro _PROBE_VARIABLES'].max_extruder_temp %}
      {% set EXTRUDER_TEMP_LEVELING = printer['gcode_macro _PROBE_VARIABLES'].max_extruder_temp %}
    {% else %}
      {% set EXTRUDER_TEMP_LEVELING = EXTRUDER_TEMP_FIRST_LAYER %}
    {% endif %}
      
    {% if params.RETRACTION_AMOUNT is defined and params.RETRACTION_SPEED is defined %}
      {% set RETRACTION_AMOUNT = params.RETRACTION_AMOUNT|float %}
      {% set RETRACTION_SPEED = params.RETRACTION_SPEED|float * 60 %}
    {% else %}
      {% set RETRACTION_AMOUNT = 0.0|float %}
      {% set RETRACTION_SPEED = 0.0|float %}
      {% set FIRMWARE_RETRACT = 'TRUE'|boolean %}
    {% endif %}
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=retraction_amount VALUE="'{ RETRACTION_AMOUNT }'"
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=retraction_speed VALUE="'{ RETRACTION_SPEED }'"
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=firmware_retract VALUE="'{ FIRMWARE_RETRACT }'"

    RUN_SHELL_COMMAND CMD=TELEGRAM_BOT_RESTART

    {% if printer['gcode_macro HEAT_SOAK'].stage in ("heating", "soaking") %}
      SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'done'"
    {% endif %}
    
    FANS_OFF

    {% if ENABLE_BOT_LIGHT %}
      SET_GCODE_VARIABLE MACRO=_LIGHT VARIABLE=disable_slicer value=0
    {% else %}
      SET_GCODE_VARIABLE MACRO=_LIGHT VARIABLE=disable_slicer value=1
    {% endif %}

    {% set BASE_TEMP = printer.heater_bed.temperature %}
    {% if printer['gcode_macro NOZZLE_LIGHT'].value|int != 0 or FORCE_LIGHT %}
      SET_LED_TEMPLATE LED=Nozzle-Light TEMPLATE=bed_heat param_target_temp={BED_TEMP_FIRST_LAYER} param_base_temp={BASE_TEMP}
    {% elif printer['gcode_macro STATUS_LIGHT'].value|int != 0 %}
      SET_LED_TEMPLATE LED=Status-Light TEMPLATE=bed_heat param_target_temp={BED_TEMP_FIRST_LAYER} param_base_temp={BASE_TEMP}
    {% endif %}
  
    M117 Starting up
    BED_MESH_CLEAR INTELLIGENT={INTELLIGENT_OFFSET_LOAD}
    BEACON_MODEL_SELECT NAME={BEACON_MODEL} INTELLIGENT={INTELLIGENT_BEACON_MODEL_LOAD}
    CLEAR_PAUSE
    M220 S100 ;Reset Feedrate
    M221 S100 ;Reset Flowrate
  
    {% if BED_MESH %}
      {% if not TEMP_MESH %}
        BED_MESH_PROFILE LOAD={BED_MESH_PROFILE} INTELLIGENT={INTELLIGENT_MESH_LOAD} TEMPERATURE_EXTRUDER={EXTRUDER_TEMP} TEMPERATURE_BED={BED_TEMP}
        {% if INTELLIGENT_MESH_LOAD == 1 and BED_MESH_PROFILE|string == "default" and printer.save_variables.variables.default_mesh is defined %}
          {% set LOADED_MESH = printer.save_variables.variables.default_mesh|string %}
        {% else %}
          {% set LOADED_MESH = BED_MESH_PROFILE %}
        {% endif %}
    
        RESPOND MSG="Using Bed Mesh Profile [{LOADED_MESH}]."
      {% elif ADAPTIVE_MESH %}
        {% set PURGE_LINE = 'FALSE'|boolean %}
      {% endif %}
    {% endif %}
  
    SET_GCODE_OFFSET Z={SLICER_Z_OFFSET + Z_OFFSET} INTELLIGENT={INTELLIGENT_OFFSET_LOAD} TEMPERATURE_EXTRUDER={EXTRUDER_TEMP} TEMPERATURE_BED={BED_TEMP}

    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={EXTRUDER_PRE_HEAT_TEMP}
    
    HEAT_BED BED_TEMP={BED_TEMP_LEVELING} SOAK_TIME={SOAK_TIME} FORCE_HOME={FORCE_HOME} HOME=TRUE
  
    _INIT_BED BED_MESH={BED_MESH} TEMP_MESH={TEMP_MESH} FORCE_MESH={FORCE_MESH} FORCE_HOME={FORCE_HOME} ADAPTIVE_MESH={ADAPTIVE_MESH} FL_SIZE={FL_SIZE}
  
    {% if BED_TEMP_FIRST_LAYER > BED_TEMP_LEVELING %}
      HEAT_BED BED_TEMP={BED_TEMP_FIRST_LAYER} SOAK_TIME={SOAK_TIME}
    {% else %}
      HEAT_BED BED_TEMP={BED_TEMP_FIRST_LAYER} SOAK_TIME=0
    {% endif %}
  
    LOOKUP_PID_PROFILE FILAMENT_PROFILE='{FILAMENT_PROFILE}' BED_TEMP={BED_TEMP} EXTRUDER_TEMP={EXTRUDER_TEMP} USE_FILAMENT_PID_PROFILE={USE_FILAMENT_PID_PROFILE} KEEP_TARGET=1 VERBOSE=low
    LOOKUP_PA_PROFILE FILAMENT_PROFILE='{FILAMENT_PROFILE}' VERBOSE=low

    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={EXTRUDER_TEMP_FIRST_LAYER}

    G90
    {% if printer["gcode_macro _PURGE_LINE_VARIABLES"].safe_z is defined %}
      G0 Z{printer["gcode_macro _PURGE_LINE_VARIABLES"].safe_z} F{printer["gcode_macro _PURGE_LINE_VARIABLES"].default_f}
    {% endif %}
    G0 X{printer["gcode_macro _PURGE_LINE_VARIABLES"].heat_up_pos[0]} Y{printer["gcode_macro _PURGE_LINE_VARIABLES"].heat_up_pos[1]} F{printer["gcode_macro _PURGE_LINE_VARIABLES"].default_f}
    G0 Z{printer["gcode_macro _PURGE_LINE_VARIABLES"].heat_up_pos[2]} F{printer["gcode_macro _PURGE_LINE_VARIABLES"].default_f}

    {% set BASE_TEMP = printer.extruder.temperature %}
    {% if printer['gcode_macro NOZZLE_LIGHT'].value|int != 0 or FORCE_LIGHT %}
      SET_LED_TEMPLATE LED=Nozzle-Light TEMPLATE=nozzle_heat param_target_temp={EXTRUDER_TEMP_FIRST_LAYER} param_base_temp={BASE_TEMP}
    {% elif printer['gcode_macro STATUS_LIGHT'].value|int != 0 %}
      SET_LED_TEMPLATE LED=Status-Light TEMPLATE=nozzle_heat param_target_temp={EXTRUDER_TEMP_FIRST_LAYER} param_base_temp={BASE_TEMP}
    {% endif %}

    M117 Heating Hotend
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={EXTRUDER_TEMP_FIRST_LAYER}

    SET_GCODE_OFFSET Z={SLICER_Z_OFFSET + Z_OFFSET} INTELLIGENT={INTELLIGENT_OFFSET_LOAD} TEMPERATURE_EXTRUDER={EXTRUDER_TEMP} TEMPERATURE_BED={BED_TEMP}

    {% if printer['gcode_macro NOZZLE_LIGHT'].value|int != 0 or FORCE_LIGHT %}
      NOZZLE_LIGHT_ON
    {% elif printer['gcode_macro STATUS_LIGHT'].value|int != 0 %}
      STATUS_LIGHT_ON
    {% endif %}

    ENABLE_FILAMENT_SENSOR FILAMENT_TYPE='{FILAMENT_TYPE}' FILAMENT_PROFILE='{FILAMENT_PROFILE}' DETECTION_LENGTH={INITIAL_DETECTION_LENGTH} RUNOUT_DISTANCE=0.0

    M117 Printing

    M83
    G1 E{10 + (RETRACTION_AMOUNT * 3)} F2700
    M82

    {% if PURGE_LINE %}
      ADAPTIVE_PURGE ADAPTIVE={ADAPTIVE_MESH} FIRMWARE_RETRACT={FIRMWARE_RETRACT} RETRACTION_SPEED={RETRACTION_SPEED} RETRACTION_AMOUNT={RETRACTION_AMOUNT} SIZE={FL_SIZE} FORCE_MESH={FORCE_MESH}
    {% else %}
      G0 Z{printer["gcode_macro _PURGE_LINE_VARIABLES"].start_z} F{printer["gcode_macro _PURGE_LINE_VARIABLES"].start_f}
      G91
      G0 X{printer["gcode_macro _PURGE_LINE_VARIABLES"].no_purge_move_x} Y{printer["gcode_macro _PURGE_LINE_VARIABLES"].no_purge_move_y} F{printer["gcode_macro _PURGE_LINE_VARIABLES"].no_purge_move_f}
      G90
      G0 Z{printer["gcode_macro _PURGE_LINE_VARIABLES"].finish_z} F{printer["gcode_macro _PURGE_LINE_VARIABLES"].finish_f}
    {% endif %}
      
    G91
    G0 X{printer["gcode_macro _PURGE_LINE_VARIABLES"].finish_move_x} Y{printer["gcode_macro _PURGE_LINE_VARIABLES"].finish_move_y} F{printer["gcode_macro _PURGE_LINE_VARIABLES"].finish_move_f}
    G90
      
    G92 E0
    M300 V{VOLUME} A3
      
    {% if PURGE_LINE %}
      {% if FIRMWARE_RETRACT %}
        G11
      {% else %}
        M83
        G1 E{RETRACTION_AMOUNT} F{RETRACTION_SPEED}
        M82
      {% endif %}
      G92 E0

      SET_FILAMENT_SENSOR SENSOR=Motion DETECTION_LENGTH={printer['filament_motion_sensor Motion'].detection_length}
    {% endif %}
    
    SET_FILAMENT_SENSOR SENSOR=Switch RUNOUT_DISTANCE={printer['filament_switch_sensor Switch'].runout_distance}

    G90

  {% endif %}
  
[gcode_macro HEAT_BED]
gcode:
  {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
  {% set SOAK_TIME = params.SOAK_TIME|default(60)|int %}
  {% set HOME = params.HOME|default('FALSE')|boolean %}
  {% set FORCE_HOME = params.FORCE_HOME|default('TRUE')|boolean %}
  {% set ACTUAL_TEMP = printer.heater_bed.temperature|float %}

  {% if ACTUAL_TEMP < BED_TEMP %}
    M117 Heating Bed
  {% else %}
    M117 Cooling Bed
  {% endif %}
  
  LOOKUP_PID_PROFILE BED_TEMP={BED_TEMP} KEEP_TARGET=1 VERBOSE=low
  
  SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={BED_TEMP}
  {% if HOME %}
    {% if FORCE_HOME %}
      G28
    {% else %}
      G28 X0 Y0 Z0
    {% endif %}
  {% endif %}
  TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={BED_TEMP} MAXIMUM={BED_TEMP + 1}

  {% if BED_TEMP > 0 and SOAK_TIME > 0 %}
    {% for i in range(SOAK_TIME) %}
      {% set remaining = SOAK_TIME - i %}
      M117 Soaking: {"%02d:%02d" % (remaining // 60, remaining % 60)}
      G4 P1000
    {% endfor %}
    M117 SOAKING: 00:00
  {% endif %}

[gcode_macro _INIT_BED]
gcode:
  {% set BED_MESH = params.BED_MESH|default('FALSE')|boolean %}
  {% set TEMP_MESH = params.TEMP_MESH|default('FALSE')|boolean %}
  {% set FORCE_MESH = params.FORCE_MESH|default('TRUE')|boolean %}
  {% set ADAPTIVE_MESH = params.ADAPTIVE_MESH|default('FALSE')|boolean %}
  {% set FORCE_HOME = params.FORCE_HOME|default('TRUE')|boolean %}
  {% set FL_SIZE = params.FL_SIZE|default("0_0_0_0")|string %}

  M117 Z-Tilt
  ADJUST_Z_TILT FORCE={FORCE_HOME} FORCE_HOME={FORCE_HOME} PARK=FALSE

  {% if BED_MESH and TEMP_MESH %}
    {% if ADAPTIVE_MESH %}
      M117 Leveling
      RESPOND MSG="Generating adaptive Bed Mesh."
      ADAPTIVE_BED_MESH SIZE={FL_SIZE} FORCE_MESH={FORCE_MESH}
    {% else %}
      M117 Leveling
      RESPOND MSG="Generating new Bed Mesh."
      BED_MESH_CALIBRATE PROFILE=print
    {% endif %}
  {% endif %}


[gcode_macro END_PRINT]
description: Put the bed in a accessibly position after printing is done
gcode:
  M400
  _END_PRINT {rawparams}


[gcode_macro _END_PRINT]
gcode:
  {% set VOLUME = params.VOLUME|default(1000)|int %}
  {% set FORCE_BEEP = params.FORCE_BEEP|default(0)|int %}
  {% set BEEP_AMOUNT = params.BEEP_AMOUNT|default(3)|int %}
  {% set FORCE_LIGHT = params.FORCE_LIGHT|default('FALSE')|boolean %}
  {% set IGNORE_SHUTTDOWN_AFTER_PRINT = params.IGNORE_SHUTTDOWN_AFTER_PRINT|default('FALSE')|boolean %}

  {% set FIRMWARE_RETRACT = printer['gcode_macro START_PRINT'].firmware_retract|boolean %}

  {% if params.RED is not defined and params.GREEN is not defined and params.BLUE is not defined and params.WHITE is not defined %}
    {% set RED = 0|int %}
    {% set GREEN = 255|int %}
    {% set BLUE = 0|int %}
    {% set WHITE = 0|int %}
    {% set BRIGHTNESS = 200|int %}
  {% else %}
    {% set RED = params.RED|default(0)|int %}
    {% set GREEN = params.GREEN|default(0)|int %}
    {% set BLUE = params.BLUE|default(0)|int %}
    {% set WHITE = params.WHITE|default(0)|int %}
    {% set BRIGHTNESS = params.BRIGHTNESS|default(255)|int %}
  {% endif %}

  {% if printer['gcode_macro START_PRINT'].retraction_amount|float != 0 %}
    {% set RETRACTION_AMOUNT = printer['gcode_macro START_PRINT'].retraction_amount|float %}
    {% if RETRACTION_AMOUNT < 1 %}
      {% set RETRACTION_AMOUNT = 1 %}
    {% endif %}
  {% else %}
    {% set RETRACTION_AMOUNT = 0|float %}
    {% set FIRMWARE_RETRACT = 'TRUE'|boolean %}
  {% endif %}

  {% if printer['gcode_macro START_PRINT'].retraction_speed|float != 0 %}
    {% set RETRACTION_SPEED = printer['gcode_macro START_PRINT'].retraction_speed|float * 60 %}
  {% else %}
    {% set RETRACTION_SPEED = 0|float %}
    {% set FIRMWARE_RETRACT = 'TRUE'|boolean %}
  {% endif %}

  {% if printer.toolhead.position.x < (printer["gcode_macro _BED_SIZE"].bed_size[0] / 2) %}
    {% set x = 1|float %}
  {% else %}
    {% set x = -1|float %}
  {% endif %}

  {% if printer.toolhead.position.y < (printer["gcode_macro _BED_SIZE"].bed_size[1] / 2) %}
    {% set y = 1|float %}
  {% else %}
    {% set y = -1|float %}
  {% endif %}

  {% if printer.toolhead.position.z >= printer.toolhead.axis_maximum.z %}
    {% set z1 = 0 %}
    {% set z2 = 0 %}
  {% elif printer.toolhead.position.z < (printer.toolhead.axis_maximum.z - 10) %}
    {% set z1 = 5 %}
    {% set z2 = 5 %}
  {% elif printer.toolhead.position.z < (printer.toolhead.axis_maximum.z - 5) %}
    {% set z1 = 5 %}
    {% set z2 = printer.toolhead.axis_maximum.z  - printer.toolhead.position.z - 5 %}
  {% else %}
    {% set z1 = printer.toolhead.axis_maximum.z - printer.toolhead.position.z %}
    {% set z2 = 0 %}
  {% endif %}

  # RESPOND TYPE=command MSG="action:prompt_end"

  SET_HEATER_TEMPERATURE HEATER=heater_bed

  BED_MESH_CLEAR INTELLIGENT=1

  {% if printer.extruder.can_extrude and "xyz" in printer.toolhead.homed_axes %}
    {% if FIRMWARE_RETRACT %}
      G10
    {% else %}
      G91
      {% if printer.toolhead.position.z < printer.toolhead.axis_maximum.z %}
        G1 Z0.1 E{RETRACTION_AMOUNT * -0.75} F{RETRACTION_SPEED}
      {% else %}
        G1 E{RETRACTION_AMOUNT * -0.75} F{RETRACTION_SPEED}
      {% endif %}
      G1 F16800
      G1 X{x} Y{y} E{RETRACTION_AMOUNT * -0.15}
      G1 X{x} Y{y} E{RETRACTION_AMOUNT * -0.10}
      # G1 E{RETRACTION_AMOUNT * -0.5} F{RETRACTION_SPEED}
      G0 Z{z1} F5000
      G90
    {% endif %}

    G91
    G1 X{x} Y{y} E-1 F16800
    G1 Z{z2} E-2 F2400
    G90
  {% endif %}

  M117 Done

  {% if FORCE_LIGHT %}
    NOZZLE_LIGHT_ON RED={RED} GREEN={GREEN} BLUE={BLUE} WHITE={WHITE} BRIGHTNESS={BRIGHTNESS}
  {% else %}
    IF_ON_SET_NOZZLE_LIGHT RED={RED} GREEN={GREEN} BLUE={BLUE} WHITE={WHITE} BRIGHTNESS={BRIGHTNESS}
  {% endif %}

  M300 V{VOLUME} A{BEEP_AMOUNT} F{FORCE_BEEP}

  M106
  
  # G0 X{printer['gcode_macro _PARK_VARIABLES'].park_pos[0]|float} Y{printer['gcode_macro _PARK_VARIABLES'].park_pos[1]|float} F5000
  {% if "xyz" in printer.toolhead.homed_axes %}
    G28 X Y
    TIMELAPSE_TAKE_FRAME
    {% if printer.extruder.can_extrude %}
      M83
      G1 Z{printer.toolhead.axis_maximum.z} E-5 F5000
      M82
    {% else %}
      G0 Z{printer.toolhead.axis_maximum.z} F5000
    {% endif %}
  {% endif %}

  G92 E0

  G4 P1

  PID_PROFILE LOAD=default HEATER=extruder DEFAULT=default VERBOSE=none
  PID_PROFILE LOAD=default HEATER=heater_bed DEFAULT=default VERBOSE=none

  HEATERS_OFF
  MOTORS_OFF
  CLEAR_PAUSE
  DISABLE_FILAMENT_SENSOR
  SET_PAUSE_NEXT_LAYER ENABLE=0
  SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0
  SET_GCODE_VARIABLE MACRO=_LIGHT VARIABLE=disable_slicer value=0
  SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=filament_type value='None'
  SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=filament_profile value='None'
  SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=retraction_amount VALUE=0
  SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=retraction_speed VALUE=0
  SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=firmware_retract VALUE={ False }
  SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=initial_detection_length VALUE=0
  UPDATE_DELAYED_GCODE ID=TURN_OFF_LIGHT DURATION=15
  UPDATE_DELAYED_GCODE ID=TIMELAPSE_RENDER DURATION=30
  UPDATE_DELAYED_GCODE ID=CLEAR_DISPLAY DURATION=60
  UPDATE_DELAYED_GCODE ID=_FANS_OFF DURATION=120
  UPDATE_DELAYED_GCODE ID=RESET_FILE DURATION=120
  {% if not IGNORE_SHUTTDOWN_AFTER_PRINT %}
    UPDATE_DELAYED_GCODE ID=SHUTDOWN_AFTER_PRINT DURATION=300
  {% endif %}


[gcode_macro PAUSE]
rename_existing: PAUSE_BASE
gcode:
  {% set Z = params.Z|default(10)|int %}
  {% set HOTEND_OFF = params.HOTEND_OFF|default('True')|boolean %}

  {% if printer.print_stats.state|string|lower == "printing" and not printer.pause_resume.is_paused %}
  	DISABLE_FILAMENT_SENSOR

    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={Z}
    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}
    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=fan VALUE={printer['fan'].speed}

    SAVE_GCODE_STATE NAME=PAUSE
    PAUSE_BASE
    {% if (printer.gcode_move.position.z + Z) < printer.toolhead.axis_maximum.z %}
      G91
      G1 Z{Z} F900
    {% else %}
      RESPOND MSG="Pause zhop exceeds maximum Z height." color=warning
      SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
    {% endif %}

    SAVE_GCODE_STATE NAME=PAUSEZHOP

    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=cached_mesh VALUE="'{ printer.bed_mesh.profile_name }'"

    G90
    G0 X{printer["gcode_macro _PARK_VARIABLES"].park_pos[0]} Y{printer["gcode_macro _PARK_VARIABLES"].park_pos[1]} F6000

    SAVE_GCODE_STATE NAME=PAUSEPARK

    SET_GCODE_OFFSET Z=0
    G0 Z{printer.toolhead.axis_maximum.z} F5000
    {% if HOTEND_OFF %}
      SET_HEATER_TEMPERATURE HEATER=extruder
    {% endif %}
  {% endif %}

  # RESPOND TYPE=command MSG="action:prompt_begin Print Paused"
  # RESPOND TYPE=command MSG="action:prompt_text Do you want to cancel or resume the print?"
  # RESPOND TYPE=command MSG="action:prompt_button_group_start"
  # RESPOND TYPE=command MSG="action:prompt_button RESUME|RESUME|success"
  # RESPOND TYPE=command MSG="action:prompt_button CANCEL|CANCEL_PRINT|error"
  # RESPOND TYPE=command MSG="action:prompt_button_group_end"
  # RESPOND TYPE=command MSG="action:prompt_show"

[gcode_macro M601]
gcode:
  PAUSE

[gcode_macro RESUME]
rename_existing: RESUME_BASE
variable_zhop: 0
variable_etemp: 0
variable_fan: 0
variable_cached_mesh: ''
gcode:
  {% if printer.pause_resume.is_paused %}
    # RESPOND TYPE=command MSG="action:prompt_end"
    {% if not printer['filament_switch_sensor Switch'].filament_detected %}
      NOTIFY_RUNOUT_SWITCH
    {% else %}
      {% set E = params.E|default(2.5)|int %}
      {% if etemp > 0 %}
        SET_HEATER_TEMPERATURE HEATER=extruder TARGET={etemp|int}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={etemp|int}
      {% endif %}
      M106 S{fan}
      ENABLE_FILAMENT_SENSOR FILAMENT_TYPE='{printer['gcode_macro START_PRINT'].filament_type|string}' FILAMENT_PROFILE='{printer['gcode_macro START_PRINT'].filament_profile|string}' DETECTION_LENGTH={printer['gcode_macro START_PRINT'].initial_detection_length} RUNOUT_DISTANCE=0.0
      RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100

      {% if printer['gcode_macro RESUME'].cached_mesh != '' %}
        BED_MESH_PROFILE LOAD={printer['gcode_macro RESUME'].cached_mesh}
      {% endif %}

      RESTORE_GCODE_STATE NAME=PAUSEZHOP MOVE=1 MOVE_SPEED=100
      G91
      M83
      {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
        G1 Z{zhop * -1} E{E} F900
      {% else %}
        G1 Z{zhop * -1} F900
      {% endif %}
      RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60
      RESUME_BASE        
      SET_FILAMENT_SENSOR SENSOR=Switch RUNOUT_DISTANCE='{printer['filament_switch_sensor Switch'].runout_distance}'
      SET_FILAMENT_SENSOR SENSOR=Motion DETECTION_LENGTH='{printer['filament_motion_sensor Motion'].detection_length}'
    {% endif %}
  {% endif %}


[gcode_macro CANCEL_PRINT]
description: Cancel the current running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  {% if printer.print_stats.state|string|lower == "printing" %}
    # RESPOND TYPE=command MSG="action:prompt_end"
    END_PRINT RED=200 BEEP_AMOUNT=5 FORCE_BEEP=1 IGNORE_SHUTDOWN_AFTER_PRINT=1
    CANCEL_PRINT_BASE
  {% endif %}


[gcode_macro SET_PAUSE_NEXT_LAYER]
description: Enable a pause if the next layer is reached
gcode:
  {% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
  {% set ENABLE = params.ENABLE|default(1)|int != 0 %}
  {% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}
  SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

[gcode_macro SET_PAUSE_AT_LAYER]
description: Enable/disable a pause if a given layer number is reached
gcode:
  {% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
  {% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined
             else params.LAYER is defined %}
  {% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}
  {% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}
  SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

[gcode_macro SET_PRINT_STATS_INFO]
rename_existing: SET_PRINT_STATS_INFO_BASE
description: Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer: { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer  : { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode:
  {% if pause_next_layer.enable %}
    RESPOND TYPE=echo MSG='{"%s, forced by pause_next_layer" % pause_next_layer.call}'
    {pause_next_layer.call}
    SET_PAUSE_NEXT_LAYER ENABLE=0
  {% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
    RESPOND TYPE=echo MSG='{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}'
    {pause_at_layer.call}
    SET_PAUSE_AT_LAYER ENABLE=0
  {% endif %}
  SET_PRINT_STATS_INFO_BASE {rawparams}
