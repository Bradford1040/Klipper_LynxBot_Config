[gcode_macro START_PRINT]
description: Pre-Heat the bed and the nozzle, reset Feedrate and Flowrate, home all axes and clean the nozzle
variable_filament_type: 'None'
gcode:
  {% set Z_OFFSET = 0.00 %} # 0.15
  {% set INTELLIGENT_MESH_LOAD = 1 %}
  {% set INTELLIGENT_OFFSET_LOAD = 1 %}

  {% set VOLUME = params.VOLUME|default(1000)|int %}

  {% set FORCE_LIGHT = params.FORCE_LIGHT|default('OFF')|string %}
  {% set ENABLE_BOT_LIGHT = params.ENABLE_BOT_LIGHT|default('ON')|string %}

  {% set PURGE_LINE = params.PURGE_LINE|default('TRUE')|string %}
  {% set DOUBLE_LINE = params.DOUBLE_LINE|default('FALSE')|string %}

  {% set FORCE_HOME = params.FORCE_HOME|default('TRUE')|string %}

  {% set BED_MESH = params.BED_MESH|default('FALSE')|string %}
  # {% set BED_MESH = 'TRUE' %}
  {% set TEMP_MESH = params.TEMP_MESH|default('FALSE')|string %}
  {% set FORCE_MESH = params.FORCE_MESH|default('TRUE')|string %}
  {% set ADAPTIVE_MESH = params.ADAPTIVE_MESH|default('FALSE')|string %}
  {% set BED_MESH_PROFILE = params.BED_MESH_PROFILE|default('default')|string %}

  {% set SOAK_TIME = params.SOAK_TIME|default(60)|int %}

  {% set SLICER_Z_OFFSET = params.Z_OFFSET|default(0.00)|float %}

  {% set USE_FILAMENT_PID_PROFILE = params.FILAMENT_PID_PROFILE|default('TRUE')|string %}
  {% set FILAMENT_PROFILE = params.FILAMENT_PROFILE|default('None')|string %}
  {% set FILAMENT_TYPE = params.FILAMENT_TYPE|default('None')|string %}
  SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=filament_type VALUE="'{ FILAMENT_TYPE }'"

  {% set FIRMWARE_RETRACT = params.FIRMWARE_RETRACT|default('FALSE')|string %}

  {% set BRIM = params.BRIM|default(0)|int %}
  {% set SKIRTS = params.SKIRTS|default(0)|int %}

  {% set FL_SIZE = params.SIZE|default("0_0_0_0")|string %}

  {% if BED_MESH|upper == 'TRUE' and TEMP_MESH|upper == 'TRUE' and ADAPTIVE_MESH|upper == 'TRUE' %}
    {% set PURGE_LINE = 'FALSE' %}
  {% endif %}
  
  {% if BRIM > 5 %}
    {% set PURGE_LINE = 'FALSE' %}
  {% endif %}
  
  {% if SKIRTS > 3 %}
    {% set PURGE_LINE = 'FALSE' %}
  {% endif %}

  {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
  {% if BED_TEMP > printer['gcode_macro _HOMING_VARIABLES'].max_probing_temp %}
    {% set BED_TEMP_LEVELING = printer['gcode_macro _HOMING_VARIABLES'].max_probing_temp %}
  {% else %}
    {% set BED_TEMP_LEVELING = BED_TEMP %}
  {% endif %}
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(215)|float %}

  {% if params.RETRACTION_AMOUNT is defined and params.RETRACTION_SPEED is defined %}
    {% set RETRACTION_AMOUNT = params.RETRACTION_AMOUNT|float %}
    {% set RETRACTION_SPEED = params.RETRACTION_SPEED|float * 60 %}
  {% else %}
    {% set RETRACTION_AMOUNT = 0|float %}
    {% set RETRACTION_SPEED = 0|float %}
    {% set FIRMWARE_RETRACT = 'TRUE'|string %}
  {% endif %}

  RUN_SHELL_COMMAND CMD=TELEGRAM_BOT_RESTART

  M106 S0

  LOOKUP_PID_PROFILE FILAMENT_PROFILE={FILAMENT_PROFILE} BED_TEMP={BED_TEMP} EXTRUDER_TEMP={EXTRUDER_TEMP} USE_FILAMENT_PID_PROFILE={USE_FILAMENT_PID_PROFILE} VERBOSE=low
  LOOKUP_PA_PROFILE FILAMENT_PROFILE={FILAMENT_PROFILE} VERBOSE=low

  {% if ENABLE_BOT_LIGHT|upper == 'ON' %}
    SET_GCODE_VARIABLE MACRO=_LIGHT VARIABLE=disable_slicer value=0
  {% else %}
    SET_GCODE_VARIABLE MACRO=_LIGHT VARIABLE=disable_slicer value=1
  {% endif %}

  {% if printer['gcode_macro NOZZLE_LIGHT'].value|int != 0 or FORCE_LIGHT|upper == 'ON' %}
    {% set BASE_TEMP = printer.heater_bed.temperature %}
    SET_LED_TEMPLATE LED=Toolhead TEMPLATE=bed_heat INDEX=1,3 param_target_temp={BED_TEMP} param_base_temp={BASE_TEMP}
  {% elif printer['gcode_macro STATUS_LIGHT'].value|int != 0 %}
    {% set BASE_TEMP = printer.heater_bed.temperature %}
    SET_LED_TEMPLATE LED=Toolhead TEMPLATE=bed_heat INDEX=2 param_target_temp={BED_TEMP} param_base_temp={BASE_TEMP}
  {% endif %}

  SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={BED_TEMP}

  M117 Starting up
  BED_MESH_CLEAR INTELLIGENT={INTELLIGENT_OFFSET_LOAD}
  CLEAR_PAUSE
  M220 S100 ;Reset Feedrate
  M221 S100 ;Reset Flowrate

  {% if BED_MESH|upper == 'TRUE' and TEMP_MESH|upper != 'TRUE' %}
    BED_MESH_PROFILE LOAD={BED_MESH_PROFILE} INTELLIGENT={INTELLIGENT_MESH_LOAD}
    {% if INTELLIGENT_MESH_LOAD == 1 and BED_MESH_PROFILE|string == "default" and printer.save_variables.variables.default_mesh is defined %}
      {% set LOADED_MESH = printer.save_variables.variables.default_mesh|string %}
    {% else %}
      {% set LOADED_MESH = BED_MESH_PROFILE %}
    {% endif %}

    RESPOND MSG="Using Bed Mesh Profile [{LOADED_MESH}]."
  {% endif %}

  SET_GCODE_OFFSET Z={SLICER_Z_OFFSET + Z_OFFSET} INTELLIGENT={INTELLIGENT_OFFSET_LOAD}

  HEAT_BED BED_TEMP={BED_TEMP_LEVELING} SOAK_TIME={SOAK_TIME}

  _INIT_BED BED_MESH={BED_MESH} TEMP_MESH={TEMP_MESH} FORCE_MESH={FORCE_MESH} ADAPTIVE_MESH={ADAPTIVE_MESH} PURGE_LINE={PURGE_LINE}

  {% if BED_TEMP > printer['gcode_macro _HOMING_VARIABLES'].max_probing_temp %}
    HEAT_BED BED_TEMP={BED_TEMP} SOAK_TIME={SOAK_TIME}
  {% endif %}

  SET_HEATER_TEMPERATURE HEATER=extruder TARGET={EXTRUDER_TEMP}

  G90
  {% if printer["gcode_macro _PURGE_LINE_VARIABLES"].safe_z is defined %}
    G0 Z{printer["gcode_macro _PURGE_LINE_VARIABLES"].safe_z} F{printer["gcode_macro _PURGE_LINE_VARIABLES"].default_f}
  {% endif %}
  G0 X{printer["gcode_macro _PURGE_LINE_VARIABLES"].heat_up_pos[0]} Y{printer["gcode_macro _PURGE_LINE_VARIABLES"].heat_up_pos[1]} F{printer["gcode_macro _PURGE_LINE_VARIABLES"].default_f}
  G0 Z{printer["gcode_macro _PURGE_LINE_VARIABLES"].heat_up_pos[2]} F{printer["gcode_macro _PURGE_LINE_VARIABLES"].default_f}

  M117 Heating Hotend
  TEMPERATURE_WAIT SENSOR=extruder MINIMUM={EXTRUDER_TEMP}

  SET_GCODE_OFFSET Z={SLICER_Z_OFFSET + Z_OFFSET} INTELLIGENT={INTELLIGENT_OFFSET_LOAD}

  {% if printer['gcode_macro NOZZLE_LIGHT'].value|int != 0 or FORCE_LIGHT|upper == 'ON' %}
    SET_LED_TEMPLATE LED=Toolhead TEMPLATE="" INDEX=1,3
    NOZZLE_LIGHT VALUE=1
  {% elif printer['gcode_macro STATUS_LIGHT'].value|int != 0 %}
    STATUS_LIGHT VALUE=1
  {% endif %}

  ENABLE_FILAMENT_SENSOR FILAMENT_TYPE={FILAMENT_TYPE}

  M117 Printing

  M83
  G1 E2 F2700
  M82

  {% if PURGE_LINE|upper == 'TRUE' %}
    G0 Z{printer["gcode_macro _PURGE_LINE_VARIABLES"].start_z} F{printer["gcode_macro _PURGE_LINE_VARIABLES"].start_f}
    G91
    G0 X{printer["gcode_macro _PURGE_LINE_VARIABLES"].start_move_x} Y{printer["gcode_macro _PURGE_LINE_VARIABLES"].start_move_y} F{printer["gcode_macro _PURGE_LINE_VARIABLES"].start_move_f}
    G90

    G0 Z{printer["gcode_macro _PURGE_LINE_VARIABLES"].line_height}
    G91
    G1 X{printer["gcode_macro _PURGE_LINE_VARIABLES"].first_line_x} Y{printer["gcode_macro _PURGE_LINE_VARIABLES"].first_line_y} F{printer["gcode_macro _PURGE_LINE_VARIABLES"].first_line_f} E{printer["gcode_macro _PURGE_LINE_VARIABLES"].first_line_e}
    G90
    {% if DOUBLE_LINE|upper == 'TRUE' %}
      G91
      G0 X{printer["gcode_macro _PURGE_LINE_VARIABLES"].second_move_x} Y{printer["gcode_macro _PURGE_LINE_VARIABLES"].second_move_y} F{printer["gcode_macro _PURGE_LINE_VARIABLES"].second_move_f}
      G1 X{printer["gcode_macro _PURGE_LINE_VARIABLES"].second_line_x} Y{printer["gcode_macro _PURGE_LINE_VARIABLES"].second_line_y} F{printer["gcode_macro _PURGE_LINE_VARIABLES"].second_line_f} E{printer["gcode_macro _PURGE_LINE_VARIABLES"].second_line_e}
      G90
    {% endif %}

    {% if FIRMWARE_RETRACT|upper == 'TRUE' %}
      G10
      G91
      G0 X{printer["gcode_macro _PURGE_LINE_VARIABLES"].wipe_move_x} Y{printer["gcode_macro _PURGE_LINE_VARIABLES"].wipe_move_y} Z{printer["gcode_macro _PURGE_LINE_VARIABLES"].wipe_move_z} F{printer["gcode_macro _PURGE_LINE_VARIABLES"].wipe_move_f}
      G90
    {% else %}
      G91
      G0 X{printer["gcode_macro _PURGE_LINE_VARIABLES"].wipe_move_x} Y{printer["gcode_macro _PURGE_LINE_VARIABLES"].wipe_move_y} Z{printer["gcode_macro _PURGE_LINE_VARIABLES"].wipe_move_z} F{printer["gcode_macro _PURGE_LINE_VARIABLES"].wipe_move_f} E{RETRACTION_AMOUNT * -1}
      G90
    {% endif %}

    G0 Z{printer["gcode_macro _PURGE_LINE_VARIABLES"].finish_z} F{printer["gcode_macro _PURGE_LINE_VARIABLES"].finish_f}
  {% else %}
    G0 Z{printer["gcode_macro _PURGE_LINE_VARIABLES"].start_z} F{printer["gcode_macro _PURGE_LINE_VARIABLES"].start_f}
    G91
    G0 X{printer["gcode_macro _PURGE_LINE_VARIABLES"].no_purge_move_x} Y{printer["gcode_macro _PURGE_LINE_VARIABLES"].no_purge_move_y} F{printer["gcode_macro _PURGE_LINE_VARIABLES"].no_purge_move_f}
    G90
    G0 Z{printer["gcode_macro _PURGE_LINE_VARIABLES"].finish_z} F{printer["gcode_macro _PURGE_LINE_VARIABLES"].finish_f}
  {% endif %}

  G91
  G0 X{printer["gcode_macro _PURGE_LINE_VARIABLES"].finish_move_x} Y{printer["gcode_macro _PURGE_LINE_VARIABLES"].finish_move_y} F{printer["gcode_macro _PURGE_LINE_VARIABLES"].finish_move_f}
  G90

  G92 E0
  M300 V{VOLUME} A3

  {% if PURGE_LINE|upper == 'TRUE' %}
    {% if FIRMWARE_RETRACT|upper == 'TRUE' %}
      G11
    {% else %}
      M83
      G1 E{RETRACTION_AMOUNT} F{RETRACTION_SPEED}
      M82
    {% endif %}
    G92 E0
  {% endif %}

[gcode_macro HEAT_BED]
gcode:
  {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
  {% set SOAK_TIME = params.SOAK_TIME|default(60)|int %}

  M117 Heating Bed

  TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={BED_TEMP}

  {% if BED_TEMP > 0 %}
    {% for i in range(SOAK_TIME) %}
      {% set remaining = SOAK_TIME - i %}
      M117 Soaking: {"%02d:%02d" % (remaining // 60, remaining % 60)}
      G4 P1000
    {% endfor %}
    M117 SOAKING: 00:00
  {% endif %}

[gcode_macro _INIT_BED]
gcode:
  {% set BED_MESH = params.BED_MESH|default('FALSE')|string %}
  {% set TEMP_MESH = params.TEMP_MESH|default('FALSE')|string %}
  {% set FORCE_MESH = params.FORCE_MESH|default('TRUE')|string %}
  {% set ADAPTIVE_MESH = params.ADAPTIVE_MESH|default('FALSE')|string %}
  {% set PURGE_LINE = params.PURGE_LINE|default('TRUE')|string %}
  {% set FORCE_HOME = params.FORCE_HOME|default('TRUE')|string %}

  M117 Z-Tilt
  ADJUST_Z_TILT FORCE={FORCE_HOME}

  {% if BED_MESH|upper == 'TRUE' and TEMP_MESH|upper == 'TRUE' %}
    {% if ADAPTIVE_MESH|upper == 'TRUE' %}
      {% set PURGE_LINE = 'FALSE' %}
      M117 Leveling
      RESPOND MSG="Generating adaptive Bed Mesh."
      ADAPTIVE_BED_MESH SIZE={FL_SIZE} FORCE_MESH={FORCE_MESH}
    {% else %}
      M117 Leveling
      RESPOND MSG="Generating new Bed Mesh."
      BED_MESH_CALIBRATE PROFILE=print
    {% endif %}
  {% endif %}


[gcode_macro END_PRINT]
description: Put the bed in a accessibly position after printing is done
gcode:
  M400
  _END_PRINT


[gcode_macro _END_PRINT]
gcode:
  {% set VOLUME = params.VOLUME|default(1000)|int %}
  {% set FORCE_BEEP = params.FORCE_BEEP|default(0)|int %}
  {% set BEEP_AMOUNT = params.BEEP_AMOUNT|default(3)|int %}
  {% set FORCE_LIGHT = params.FORCE_LIGHT|default('OFF')|string %}

  {% set FIRMWARE_RETRACT = params.FIRMWARE_RETRACT|default('FALSE')|string %}

  {% if params.RED is not defined and params.GREEN is not defined and params.BLUE is not defined and params.WHITE is not defined %}
    {% set RED = 0|int %}
    {% set GREEN = 200|int %}
    {% set BLUE = 0|int %}
    {% set WHITE = 0|int %}
    {% set BRIGHTNESS = 255|int %}
  {% else %}
    {% set RED = params.RED|default(0)|int %}
    {% set GREEN = params.GREEN|default(0)|int %}
    {% set BLUE = params.BLUE|default(0)|int %}
    {% set WHITE = params.WHITE|default(0)|int %}
    {% set BRIGHTNESS = params.BRIGHTNESS|default(255)|int %}
  {% endif %}

  {% if params.RETRACTION_AMOUNT is defined %}
    {% set RETRACTION_AMOUNT = params.RETRACTION_AMOUNT|float %}
  {% else %}
    {% set RETRACTION_AMOUNT = 0|float %}
    {% set FIRMWARE_RETRACT = 'TRUE'|string %}
  {% endif %}

  {% if params.RETRACTION_SPEED is defined %}
    {% set RETRACTION_SPEED = params.RETRACTION_SPEED|float * 60 %}
  {% else %}
    {% set RETRACTION_SPEED = 0|float %}
    {% set FIRMWARE_RETRACT = 'TRUE'|string %}
  {% endif %}

  {% if printer.toolhead.position.x < (printer["gcode_macro _BED_SIZE"].bed_size[0] / 2) %}
    {% set x = 0.5|float %}
  {% else %}
    {% set x = -0.5|float %}
  {% endif %}

  {% if printer.toolhead.position.y < (printer["gcode_macro _BED_SIZE"].bed_size[1] / 2) %}
    {% set y = 0.5|float %}
  {% else %}
    {% set y = -0.5|float %}
  {% endif %}

  {% if printer.toolhead.position.z < (printer.toolhead.axis_maximum.z - 10) %}
    {% set z1 = 5 %}
    {% set z2 = 5 %}
  {% elif printer.toolhead.position.z < (printer.toolhead.axis_maximum.z - 5) %}
    {% set z1 = 5 %}
    {% set z2 = printer.toolhead.axis_maximum.z  - printer.toolhead.position.z - 5 %}
  {% else %}
    {% set z1 = printer.toolhead.axis_maximum.z  - printer.toolhead.position.z %}
    {% set z2 = 0 %}
  {% endif %}
    
  BED_MESH_CLEAR INTELLIGENT=1
  
  {% if FIRMWARE_RETRACT|upper == 'TRUE' %}
    G10
  {% else %}
    G91
    G1 X{x} Y{y} Z{z1} E{RETRACTION_AMOUNT * -1} F{RETRACTION_SPEED}
    G90
  {% endif %}

  G91
  G1 X{x} Y{y} Z{z2} E-2 F2400
  G90

  M117 Done
  HEATERS_OFF

  {% if FORCE_LIGHT|upper == 'ON' %}
    NOZZLE_LIGHT_ON RED={RED} GREEN={GREEN} BLUE={BLUE} WHITE={WHITE} BRIGHTNESS={BRIGHTNESS}
  {% else %}
    IF_ON_SET_NOZZLE_LIGHT RED={RED} GREEN={GREEN} BLUE={BLUE} WHITE={WHITE} BRIGHTNESS={BRIGHTNESS}
  {% endif %}

  M300 V{VOLUME} A{BEEP_AMOUNT} F{FORCE_BEEP}

  G0 X{printer.configfile.settings.stepper_x.position_endstop - 5} Y{printer.configfile.settings.stepper_y.position_endstop - 5} F5000
  TIMELAPSE_TAKE_FRAME
  G0 Z{printer.toolhead.axis_maximum.z} F5000

  G92 E0

  G4 P1

  PID_PROFILE LOAD=default HEATER=extruder DEFAULT=default VERBOSE=none
  PID_PROFILE LOAD=default HEATER=heater_bed DEFAULT=default VERBOSE=none

  ALL_OFF
  DISABLE_FILAMENT_SENSOR
  CLEAR_PAUSE
  SET_GCODE_OFFSET Z=0.00
  SET_GCODE_VARIABLE MACRO=_LIGHT VARIABLE=disable_slicer value=0
  SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=filament_type value='None'
  UPDATE_DELAYED_GCODE ID=TURN_OFF_LIGHT DURATION=15
  UPDATE_DELAYED_GCODE ID=TIMELAPSE_RENDER DURATION=30
  UPDATE_DELAYED_GCODE ID=CLEAR_DISPLAY DURATION=60
  {% if printer['gcode_macro SHUTDOWN_AFTER_PRINT'].value|int == 1 %}
    UPDATE_DELAYED_GCODE ID=SHUTDOWN_AFTER_PRINT DURATION=120
  {% endif %}
  UPDATE_DELAYED_GCODE ID=RESET_FILE DURATION=35


[gcode_macro PAUSE]
rename_existing: PAUSE_BASE
gcode:
    {% set Z = params.Z|default(10)|int %}                                               

    {% if printer['pause_resume'].is_paused|int == 0 %}
        DISABLE_FILAMENT_SENSOR

        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={Z}
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}

        SAVE_GCODE_STATE NAME=PAUSE
        PAUSE_BASE
        {% if (printer.gcode_move.position.z + Z) < printer.toolhead.axis_maximum.z %}
            G91
            G1 Z{Z} F900
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90
        G0 X{printer["gcode_macro _PARK_VARIABLES"].park_pos[0]} Y{printer["gcode_macro _PARK_VARIABLES"].park_pos[1]} F6000
        SAVE_GCODE_STATE NAME=PAUSEPARK
        SET_HEATER_TEMPERATURE HEATER=extruder
    {% endif %}

[gcode_macro RESUME]
rename_existing: RESUME_BASE
variable_zhop: 0
variable_etemp: 0
gcode:
    {% set E = params.E|default(2.5)|int %}

    {% if printer['pause_resume'].is_paused|int == 1 %}
        {% if etemp > 0 %}
            SET_HEATER_TEMPERATURE HEATER=extruder TARGET={etemp|int}
            TEMPERATURE_WAIT SENSOR=extruder MINIMUM={etemp|int}
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100
        G91
        M83
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
            G1 Z{zhop * -1} E{E} F900
        {% else %}
            G1 Z{zhop * -1} F900
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60
        RESUME_BASE
        ENABLE_FILAMENT_SENSOR FILAMENT_TYPE={printer['gcode_macro START_PRINT'].filament_type|string}
    {% endif %}


[gcode_macro CANCEL_PRINT]
description: Cancel the current running print
rename_existing: CANCEL_PRINT_BASE
gcode:
    END_PRINT RED=200 BEEP_AMOUNT=5 FORCE_BEEP=1
    CANCEL_PRINT_BASE


# Usage: SET_PAUSE_NEXT_LAYER [ENABLE=[0|1]] [MACRO=<name>]
[gcode_macro SET_PAUSE_NEXT_LAYER]
description: Enable a pause if the next layer is reached
gcode:
  {% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
  {% set ENABLE = params.ENABLE|default(1)|int != 0 %}
  {% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}
  SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

# Usage: SET_PAUSE_AT_LAYER [ENABLE=[0|1]] [LAYER=<number>] [MACRO=<name>]
[gcode_macro SET_PAUSE_AT_LAYER]
description: Enable/disable a pause if a given layer number is reached
gcode:
  {% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
  {% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined
             else params.LAYER is defined %}
  {% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}
  {% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}
  SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

# Usage: SET_PRINT_STATS_INFO [TOTAL_LAYER=<total_layer_count>] [CURRENT_LAYER= <current_layer>]
[gcode_macro SET_PRINT_STATS_INFO]
rename_existing: SET_PRINT_STATS_INFO_BASE
description: Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer: { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer  : { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode:
  {% if pause_next_layer.enable %}
    {action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}
    {pause_next_layer.call} ; execute the given gcode to pause, should be either M600 or PAUSE
    SET_PAUSE_NEXT_LAYER ENABLE=0
  {% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
    {action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}
    {pause_at_layer.call} ; execute the given gcode to pause, should be either M600 or PAUSE
    SET_PAUSE_AT_LAYER ENABLE=0
  {% endif %}
  SET_PRINT_STATS_INFO_BASE {rawparams}
