[gcode_macro START_PRINT]
description: Pre-Heat the bed and the nozzle, reset Feedrate and Flowrate, home all axes and clean the nozzle
gcode:
  {% set Z_OFFSET = 0.01 %}
  {% set VOLUME = params.VOLUME|default(1000)|int %}
  {% set FORCE_LIGHT = params.FORCE_LIGHT|default('OFF')|string %}
  {% set ENABLE_BOT_LIGHT = params.ENABLE_BOT_LIGHT|default('ON')|string %}
  
  {% set PURGE_LINE = params.PURGE_LINE|default('TRUE')|string %}
  {% set DOUBLE_LINE = params.DOUBLE_LINE|default('FALSE')|string %}
  {% set FORCE_HOME = params.FORCE_HOME|default('TRUE')|string %}
  {% set BED_MESH = params.BED_MESH|default('FALSE')|string %}
  {% set FORCE_MESH = params.FORCE_MESH|default('TRUE')|string %}
  {% set ADAPTIVE_MESH = params.ADAPTIVE_MESH|default('FALSE')|string %}
  {% set BED_MESH_PROFILE = params.BED_MESH_PROFILE|default('default')|string %}
  {% set SOAK_TIME = params.SOAK_TIME|default(60)|int %}
  {% set BED_PRE_HEAT_OFFSET = params.BED_PRE_HEAT_OFFSET|default(15)|int %}
  {% set SLICER_Z_OFFSET = params.Z_OFFSET|default(0.00)|float %}
  {% set FILAMENT_PID_PROFILE = params.FILAMENT_PID_PROFILE|default('TRUE')|string %}
  {% set FIRMWARE_RETRACT = params.FIRMWARE_RETRACT|default('FALSE')|string %}
  {% set BRIM = params.BRIM|default(0)|int %}
  {% set SKIRTS = params.SKIRTS|default(0)|int %}
  {% set FL_SIZE = params.SIZE|default("0_0_0_0")|string %}
  {% set FILAMENT_PROFILE = params.FILAMENT_PROFILE|default('none')|string %}

  {% if BED_MESH == 'TRUE' and ADAPTIVE_MESH == 'TRUE' %}
    {% set PURGE_LINE = 'FALSE' %}
  {% endif %}
  
  {% if BRIM > 5 %}
    {% set PURGE_LINE = 'FALSE' %}
  {% endif %}
  
  {% if SKIRTS > 3 %}
    {% set PURGE_LINE = 'FALSE' %}
  {% endif %}

  {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(215)|float %}

  {% if 'RETRACTION_AMOUNT' in params|upper %}
    {% set RETRACTION_AMOUNT = params.RETRACTION_AMOUNT|float %}
  {% else %}
    {% set RETRACTION_AMOUNT = 0|float %}
    {% set FIRMWARE_RETRACT = 'TRUE'|string %}
  {% endif %}

  {% if 'RETRACTION_SPEED' in params|upper %}
    {% set RETRACTION_SPEED = params.RETRACTION_SPEED|float * 60 %}
  {% else %}
    {% set RETRACTION_SPEED = 0|float %}
    {% set FIRMWARE_RETRACT = 'TRUE'|string %}
  {% endif %}

  {% if FILAMENT_PID_PROFILE|upper == 'TRUE' %}
    LOOKUP_PID_PROFILE FILAMENT_PROFILE={FILAMENT_PROFILE} BED_TEMP={BED_TEMP} EXTRUDER_TEMP={EXTRUDER_TEMP}
  {% else %}
    LOOKUP_PID_PROFILE BED_TEMP={BED_TEMP} EXTRUDER_TEMP={EXTRUDER_TEMP}
  {% endif %}

  {% if ENABLE_BOT_LIGHT|upper == 'ON' %}
    SET_GCODE_VARIABLE MACRO=LIGHT VARIABLE=disable_slicer value=0
  {% else %}
    SET_GCODE_VARIABLE MACRO=LIGHT VARIABLE=disable_slicer value=1
  {% endif %}

  {% if printer['gcode_macro NOZZLE_LIGHT'].value|int != 0 or FORCE_LIGHT|upper == 'ON' %}
    {% set BASE_TEMP = printer.heater_bed.temperature %}
    # SET_LED_TEMPLATE LED=Toolhead TEMPLATE=bed_heat INDEX=1 param_target_temp={BED_TEMP} param_base_temp={BASE_TEMP}
    SET_LED_TEMPLATE LED=Toolhead TEMPLATE=bed_heat INDEX=1,3 param_target_temp={BED_TEMP} param_base_temp={BASE_TEMP}
  {% elif printer['gcode_macro STATUS_LIGHT'].value|int != 0 %}
    {% set BASE_TEMP = printer.heater_bed.temperature %}
    SET_LED_TEMPLATE LED=Toolhead TEMPLATE=bed_heat INDEX=2 param_target_temp={BED_TEMP} param_base_temp={BASE_TEMP}
  {% endif %}
  # Heat bed to desired temp - offset
  # {% if printer.heater_bed.temperature < BED_TEMP - BED_PRE_HEAT_OFFSET %}
    # M140 S{BED_TEMP - BED_PRE_HEAT_OFFSET}
  # {% endif %}
  M140 S{BED_TEMP}

  M117 Starting up
  BED_MESH_CLEAR
  CLEAR_PAUSE
  # SET_GCODE_OFFSET Z={Z_OFFSET}
  SET_GCODE_OFFSET Z={SLICER_Z_OFFSET + Z_OFFSET}
  M220 S100 ;Reset Feedrate
  M221 S100 ;Reset Flowrate

  M117 Homing
  {% if FORCE_HOME == 'TRUE' %}
    G28 P0
  {% else %}
    G28 X0 Y0 Z0 P0
  {% endif %}
  
  {% if BED_MESH|upper == 'FALSE' %}
    RESPOND PREFIX=Using MSG="Bed Mesh Profile {BED_MESH_PROFILE}"
    BED_MESH_PROFILE LOAD={BED_MESH_PROFILE}
  {% endif %}
  
  G90
  G0 X{printer["gcode_macro _PURGE_LINE_VARIABLES"].heat_up_pos[0]} F5000
  G0 Y{printer["gcode_macro _PURGE_LINE_VARIABLES"].heat_up_pos[1]} F5000
  G0 Z1 F5000

  M117 Heating up
  # {% if printer.heater_bed.temperature < BED_TEMP - BED_PRE_HEAT_OFFSET %}
    # M190 S{BED_TEMP - BED_PRE_HEAT_OFFSET}
  # {% endif %}


  # Heat bed to desired temp, but don't wait for it
  # M140 S{BED_TEMP}
  M190 S{BED_TEMP}
  # Heat extruder to desired temp but don't wait for it
  # M104 S{EXTRUDER_TEMP}

  # Set and wait for nozzle to reach temperature
  M109 S{EXTRUDER_TEMP}
  # Zero Extruder
  G92 E0

  # Wait for bed to reach temperature
  # M190 S{BED_TEMP}

  {% if BED_TEMP > 0 %}
    {% for i in range(SOAK_TIME) %}
      {% set remaining = SOAK_TIME - i %}
      M117 Start in {"%02d:%02d" % (remaining // 60, remaining % 60)}
      # M117 Starting in {remaining}s
      G4 P1000
    {% endfor %}
  {% endif %}

  {% if BED_MESH|upper == 'TRUE' %}
    {% if ADAPTIVE_MESH|upper == 'TRUE' %}
      {% set PURGE_LINE = 'FALSE' %}
      M117 Leveling
      RESPOND PREFIX=Generating MSG="adaptive Bed Mesh"
      ADAPTIVE_BED_MESH SIZE={FL_SIZE} FORCE_MESH={FORCE_MESH}
    {% else %}
      M117 Leveling
      RESPOND PREFIX=Generating MSG="new Bed Mesh"
      BED_MESH_CALIBRATE PROFILE=print
    {% endif %}
  {% endif %}

  {% if printer['gcode_macro NOZZLE_LIGHT'].value|int != 0 or FORCE_LIGHT|upper == 'ON' %}
    # SET_LED_TEMPLATE LED=Toolhead TEMPLATE="" INDEX=1
    SET_LED_TEMPLATE LED=Toolhead TEMPLATE="" INDEX=1,3
    NOZZLE_LIGHT value=1
  {% elif printer['gcode_macro STATUS_LIGHT'].value|int != 0 %}
    SET_LED_TEMPLATE LED=Toolhead TEMPLATE="" INDEX=2
    STATUS_LIGHT value=1
  {% endif %}
  M117 Printing

  M83
  G1 E2 F2700
  M82

  {% if PURGE_LINE|upper == 'TRUE' %}
    # Move to start position
    G0 Z0.1
    G91
    G0 X-2 F5000
    G90

    # Move the Z Axis up
    G0 Z0.28
    # Draw the first line
    G91
    G1 Y60 F1500 E5
    G90
    {% if DOUBLE_LINE|upper == 'TRUE' %}
      # Move to side a little
      G91
      G0 X-1 F5000
      # Draw the second line
      G1 Y-60 F1500 E5
      G90
    {% endif %}

    {% if FIRMWARE_RETRACT|upper == 'TRUE' %}
      G10
    {% else %}
      M83
      G1 E{RETRACTION_AMOUNT * -1} F{RETRACTION_SPEED}
      M82
    {% endif %}
    # Move Z Axis up
    G0 Z5.0 F3000

    G91
    G0 X-5 Y-5 F5000
    G90

    # G4 P1000
    
    # {% if FIRMWARE_RETRACT|upper == 'TRUE' %}
    #   G11
    # {% else %}
    #   M83
    #   G1 E{RETRACTION_AMOUNT} F{RETRACTION_SPEED}
    #   M82
    # {% endif %}
  {% else %}
    G0 Z0.1
    G91
    G0 X-5 F5000
    G90
    G0 Z1
  {% endif %}

  # Reset Extruder
  G92 E0
  M300 V{VOLUME} A3



[gcode_macro END_PRINT]
description: Put the bed in a accessibly position after printing is done
gcode:
  {% set VOLUME = params.VOLUME|default(1000)|int %}
  {% set FORCE_LIGHT = params.FORCE_LIGHT|default('OFF')|string %}

  {% set FIRMWARE_RETRACT = params.FIRMWARE_RETRACT|default('FALSE')|string %}

  {% if 'RED' not in params|upper and 'GREEN' not in params|upper and 'BLUE' not in params|upper and 'WHITE' not in params|upper and 'BRIGHTNESS' not in params|upper %}
    {% set RED = 0|int %}
    {% set GREEN = 200|int %}
    {% set BLUE = 0|int %}
    {% set WHITE = 0|int %}
    {% set BRIGHTNESS = 255|int %}
  {% else %}
    {% set RED = params.RED|default(0)|int %}
    {% set GREEN = params.GREEN|default(0)|int %}
    {% set BLUE = params.BLUE|default(0)|int %}
    {% set WHITE = params.WHITE|default(0)|int %}
    {% set BRIGHTNESS = params.BRIGHTNESS|default(255)|int %}
  {% endif %}

  {% if 'RETRACTION_AMOUNT' in params|upper %}
    {% set RETRACTION_AMOUNT = params.RETRACTION_AMOUNT|float %}
  {% else %}
    {% set RETRACTION_AMOUNT = 0|float %}
    {% set FIRMWARE_RETRACT = 'TRUE'|string %}
  {% endif %}

  {% if 'RETRACTION_SPEED' in params|upper %}
    {% set RETRACTION_SPEED = params.RETRACTION_SPEED|float * 60 %}
  {% else %}
    {% set RETRACTION_SPEED = 0|float %}
    {% set FIRMWARE_RETRACT = 'TRUE'|string %}
  {% endif %}

  {% if printer.toolhead.position.x < (printer["gcode_macro _BED_SIZE"].bed_size[0] / 2) %}
    {% set x = 0.5|float %}
  {% else %}
    {% set x = -0.5|float %}
  {% endif %}

  {% if printer.toolhead.position.y < (printer["gcode_macro _BED_SIZE"].bed_size[1] / 2) %}
    {% set y = 0.5|float %}
  {% else %}
    {% set y = -0.5|float %}
  {% endif %}

  M400
  {% if FIRMWARE_RETRACT|upper == 'TRUE' %}
    G10
  {% else %}
    G91
    G1 X{x} Y{y} Z5 E{RETRACTION_AMOUNT * -1} F{RETRACTION_SPEED}
    G90
  {% endif %}

  G91
  G1 X{x} Y{y} Z5 E-2 F2400
  G90

  M117 Done
  HEATERS_OFF

  {% if FORCE_LIGHT|upper == 'ON' %}
    NOZZLE_LIGHT_ON RED={RED} GREEN={GREEN} BLUE={BLUE} WHITE={WHITE} BRIGHTNESS={BRIGHTNESS}
  {% else %}
    IF_ON_SET_NOZZLE_LIGHT RED={RED} GREEN={GREEN} BLUE={BLUE} WHITE={WHITE} BRIGHTNESS={BRIGHTNESS}
  {% endif %}

  M300 V{VOLUME} A3

  G0 X{printer.configfile.settings.stepper_x.position_endstop - 5} Y{printer.configfile.settings.stepper_y.position_endstop - 5} F5000
  # TIMELAPSE_TAKE_FRAME
  G0 Z{printer.configfile.settings.stepper_z.position_max - 5} F5000

  G92 E0
  
  # HEATERS_OFF
  # MOTORS_OFF
  # SET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=1
  # SET_KINEMATIC_POSITION X={printer["gcode_macro _PARK_VARIABLES"].park_pos[0]} Y={printer["gcode_macro _PARK_VARIABLES"].park_pos[1]} Z=310
  # FANS_OFF
  ALL_OFF
  BED_MESH_CLEAR
  CLEAR_PAUSE
  # SET_GCODE_OFFSET Z=0.00
  SET_GCODE_VARIABLE MACRO=LIGHT VARIABLE=disable_slicer value=0
  UPDATE_DELAYED_GCODE ID=TURN_OFF_LIGHT DURATION=5
  UPDATE_DELAYED_GCODE ID=CLEAR_DISPLAY DURATION=60
  UPDATE_DELAYED_GCODE ID=RESET_FILE DURATION=60


[gcode_macro PAUSE]
rename_existing: PAUSE_BASE
gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                   ; z hop amount

    {% if printer['pause_resume'].is_paused|int == 0 %}
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro

        #SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0                                 ; disable filament sensor
        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume
        PAUSE_BASE                                                                           ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{z} F900                                                                     ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                  ; absolute positioning
        G0 X{printer["gcode_macro _PARK_VARIABLES"].park_pos[0]} Y{printer["gcode_macro _PARK_VARIABLES"].park_pos[1]} F6000
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)
        M104 S0                                                                              ; turn off hotend
        #SET_IDLE_TIMEOUT TIMEOUT=43200                                                      ; set timeout to 12 hours
    {% endif %}

[gcode_macro RESUME]
rename_existing: RESUME_BASE
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}                                          ; hotend prime amount (in mm)

    {% if printer['pause_resume'].is_paused|int == 1 %}
        #SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1                         ; enable filament sensor
        #INITIAL_RGB                                                                 ; reset LCD color
        #SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout} ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                        ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)
        G91                                                                          ; relative positioning
        M83                                                                          ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
            G1 Z{zhop * -1} E{e} F900                                                ; prime nozzle by E, lower Z back down
        {% else %}
            G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          ; restore position
        RESUME_BASE                                                                  ; resume print
    {% endif %}


[gcode_macro CANCEL_PRINT]
description: Cancel the current running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  {% if printer['pause_resume'].is_paused|int == 0 %}
    END_PRINT RED=200
    CANCEL_PRINT_BASE
  {% endif %}


# Usage: SET_PAUSE_NEXT_LAYER [ENABLE=[0|1]] [MACRO=<name>]
[gcode_macro SET_PAUSE_NEXT_LAYER]
description: Enable a pause if the next layer is reached
gcode:
  {% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
  {% set ENABLE = params.ENABLE | default(1) | int != 0 %}
  {% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}
  SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

# Usage: SET_PAUSE_AT_LAYER [ENABLE=[0|1]] [LAYER=<number>] [MACRO=<name>]
[gcode_macro SET_PAUSE_AT_LAYER]
description: Enable/disable a pause if a given layer number is reached
gcode:
  {% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
  {% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined
             else params.LAYER is defined %}
  {% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}
  {% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}
  SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

# Usage: SET_PRINT_STATS_INFO [TOTAL_LAYER=<total_layer_count>] [CURRENT_LAYER= <current_layer>]
[gcode_macro SET_PRINT_STATS_INFO]
rename_existing: SET_PRINT_STATS_INFO_BASE
description: Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer: { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer  : { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode:
  {% if pause_next_layer.enable %}
    {action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}
    {pause_next_layer.call} ; execute the given gcode to pause, should be either M600 or PAUSE
    SET_PAUSE_NEXT_LAYER ENABLE=0
  {% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
    {action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}
    {pause_at_layer.call} ; execute the given gcode to pause, should be either M600 or PAUSE
    SET_PAUSE_AT_LAYER ENABLE=0
  {% endif %}
  SET_PRINT_STATS_INFO_BASE {rawparams}
